{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SAEhCC,EAAS,KACTC,EAAQ,KACRC,EAAO,KACPC,EAAgB,EAChBC,EAAWD,EAAgB,EA2B/BN,EAAKQ,iBAAiB,UA1BL,SAAAC,GACfA,EAAEC,iBACFP,EAASQ,OAAOF,EAAEG,cAAcC,SAASC,OAAOC,OAChDX,EAAQO,OAAOF,EAAEG,cAAcC,SAASG,MAAMD,OAC9CV,EAAOM,OAAOF,EAAEG,cAAcC,SAASI,KAAKF,OAC5CG,YAAW,WACTC,aAAY,WAqBhB,IAAuBC,EAAUC,EACzBC,EArBEhB,IAAkBH,KAoBLiB,EAjBHb,EAiBac,EAjBHjB,EAkBtBkB,EAAgBC,KAAKC,SAAW,GAC/B,IAAIC,SAAQ,SAACC,EAASC,GACvBL,EACFI,EAAQ,CAAEE,SAAAR,EAAUJ,MAAAK,IAEpBM,EAAO,CAAEC,SAAAR,EAAUJ,MAAAK,G,KAtBhBQ,MAAK,SAAAC,G,IAAGC,EAAQD,EAARF,SAAUI,EAAKF,EAALd,MACjBiB,QAAQC,IAAI,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,OAC1DlC,EAAAsC,OAAOC,QAAQ,uBAAwCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAE9DM,OAAM,SAAAR,G,IAAGS,EAAQT,EAARF,SAAUY,EAAKV,EAALd,MAClBiB,QAAQC,IAAI,sBAAuCC,OAAfI,EAAS,QAAYJ,OAANK,EAAM,OACzD1C,EAAAsC,OAAOK,QAAQ,sBAAqCN,OAAfI,EAAS,QAAYJ,OAANK,EAAM,M,IAG9DjC,GADAD,GAAiB,GACU,EAC3BF,GAASC,E,GACRA,E,GACFD,GAgBHG,EAA2B,GAD3BD,EAAgB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\n\nlet amount = null;\nlet delay = null;\nlet step = null;\nlet invokeCounter = 0;\nlet position = invokeCounter + 1;\nconst onSubmit = e => {\n  e.preventDefault();\n  amount = Number(e.currentTarget.elements.amount.value);\n  delay = Number(e.currentTarget.elements.delay.value);\n  step = Number(e.currentTarget.elements.step.value);\n  setTimeout(() => {\n    setInterval(() => {\n      if (invokeCounter === amount) {\n        return;\n      }\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      invokeCounter += 1;\n      position = invokeCounter + 1;\n      delay += step;\n    }, step);\n  }, delay);\n  resetCounter();\n};\nform.addEventListener('submit', onSubmit);\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n};\nfunction resetCounter() {\n  invokeCounter = 0;\n  position = invokeCounter + 1;\n};\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$invokeCounter","$ce04d3a99e08e73b$var$position","addEventListener","e","preventDefault","Number","currentTarget","elements","amount","value","delay","step","setTimeout","setInterval","position3","delay3","shouldResolve","Math","random","Promise","resolve","reject","position","then","param","position1","delay1","console","log","concat","Notify","success","catch","position2","delay2","failure"],"version":3,"file":"03-promises.22492085.js.map"}